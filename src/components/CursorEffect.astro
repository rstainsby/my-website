---
  interface Props {
    bindToElementId: string;
  }

  const { bindToElementId } = Astro.props;
---

<script>
  class CursorEffect extends HTMLElement {
    constructor() {
      super();
    }
    
    connectedCallback() {
      const bindToElement: HTMLElement | null = this.dataset.bindtoelementid ? document.getElementById(this.dataset.bindtoelementid) : null;
      const cursorEffect: HTMLElement | null = document.getElementById('cursor-effect');
      
      const moveCursorEffect = (event: MouseEvent) => setTimeout(() => {  
        const lightCenterX = event.x - 150;
        const lightCenterY = event.y - 150;
        
        if (cursorEffect) {
          cursorEffect.style.transform = `translate(${lightCenterX}px, ${lightCenterY}px`;
        }
      }, 80);
      
      if (bindToElement) {
        bindToElement.addEventListener('mousemove', moveCursorEffect, { passive: true });
      } else if (this.dataset.bindtoelementid) {
        console.error(`CursorEffect: Element with id ${this.dataset.bindtoelementid} not found`);
      } else {
        console.error('CursorEffect: bindToElementId is required');
      }
    }
  }

  customElements.define('cursor-effect', CursorEffect);
</script>

<cursor-effect data-bindtoelementid={bindToElementId}>
  <span id="cursor-effect" class="cursor-effect"></span>
</cursor-effect>

<style scoped>
  .cursor-effect {
  position: fixed;
  height: 300px;
  width: 300px;
  top: 0;
  left: 0;
  border-radius: 50%;
  background: radial-gradient(circle, var(--cl-white-gold) 0%, rgba(115,115,115,0) 100%);
  opacity: 0.1;
  mix-blend-mode:hard-light;

  -webkit-filter: blur(10px);
  -moz-filter: blur(5px);
  -o-filter: blur(5px);
  -ms-filter: blur(5px);
  filter: blur(80px);
  
  z-index: 0;
}

.cursor-effect:before {
  display: block;
  content: '';
  width: inherit;
  height: inherit;
  background: radial-gradient(transparent, black);
  border-radius: 50%;
  z-index: 2;
  opacity: 0.1;
}
</style>